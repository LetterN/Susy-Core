buildscript {
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}

plugins {
    id "eclipse"
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'wtf.gofancy.fancygradle' version "${fancy_gradle_version}"
}

apply plugin: 'org.spongepowered.mixin'

version = "${project.mod_version}"
group = 'supersymmetry'
archivesBaseName = "supersymmetry-${project.minecraft_version}" // this will buid as supersymmetry-1.12.2-version

def final isCI = System.getenv("GITHUB_ACTION")
def final ref = System.getenv("GITHUB_PR_NUMBER") ? System.getenv("GITHUB_PR_NUMBER") : System.getenv("GITHUB_SHA")

if(isCI) {
    version = version + "-CI" + (ref ? "-${ref}" : "")
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

println('[BUILD]: Project Version: ' + version)
println('[BUILD]: Java: ' + System.getProperty('java.version'))
println('[BUILD]: JVM: ' + System.getProperty('java.vm.version') + ' (' + System.getProperty('java.vendor') + ')')
println('[BUILD]: Arch: ' + System.getProperty('os.arch'))

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    if (project.use_access_transformer.toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        client {
            workingDirectory project.file('run')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            jvmArg '-Dmixin.hotSwap=true'
            jvmArg '-Dmixin.checks.interfaces=true'
            jvmArg '-Dmixin.debug=true'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // environment 'MC_VERSION', minecraft_version.toString()
        }

        server {
            workingDirectory project.file('run')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            jvmArg '-Dmixin.hotSwap=true'
            jvmArg '-Dmixin.checks.interfaces=true'

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            // environment 'MC_VERSION', minecraft_version.toString()
        }
    }
}

repositories {
    // Generic curseforge mods
    maven { 
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    // Mixin
    maven { 
        url = 'https://repo.spongepowered.org/maven'
        content {
            includeGroup "org.spongepowered"
        }
    }
    // AssetMover and zonebooster
    maven { 
        url = 'https://maven.cleanroommc.com'
        content {
            includeGroup "com.cleanroommc"
            includeGroup "zone.rong"
        }
    }
    // JEI
    maven { url 'https://dvs1.progwml6.com/files/maven' }
    // CraftTweaker and JEI Backup
    maven { url 'https://maven.blamejared.com' }
    // The One Probe
    maven { url 'https://maven.tterrag.com/'}
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: "${project.minecraft_version}-${project.forge_version}"

    // Hard Dependencies
    implementation fg.deobf("curse.maven:codechicken-lib-1-8-${project.ccl_pid}:${project.ccl_fid}")
    implementation fg.deobf("curse.maven:geckolib-388172:4020277")
    
    // GT Dependencies
    implementation "curse.maven:gregtech-ce-unofficial-${project.ceu_pid}:${project.ceu_fid}-sources-${project.ceu_sources}-api-${project.ceu_api}"
    implementation "curse.maven:gregicality-multiblocks-${project.gcm_pid}:${project.gcm_fid}-sources-${project.gcm_sources}"
    implementation fg.deobf("curse.maven:gregtech-food-option-477021:4496053")

    implementation fg.deobf('curse.maven:realistic-terrain-generation-unofficial-648514:4404814')
    implementation fg.deobf('curse.maven:biomes-o-plenty-220318:2842510')
    implementation fg.deobf("curse.maven:no-tree-punching-289043:2983385") // No-tree-punching v2.0.21
    implementation fg.deobf("curse.maven:alcatrazcore-304493:2666560") // AlcatrazCore v1.0.4

    // Soft Dependencies
    implementation "mezz.jei:jei_${project.minecraft_version}:${project.jei_version}"
    implementation "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-${project.crt_version}"
    implementation "mcjty.theoneprobe:TheOneProbe-1.12:1.12-${project.the_one_probe_version}"

    // Compile-Time Dependencies
    compileOnly "org.jetbrains:annotations:24.0.0"
    annotationProcessor "org.jetbrains:annotations:24.0.0"

    if (project.use_assetmover.toBoolean()) {
        fg.deobf "com.cleanroommc:assetmover:${assetmover_version}"
    }

    if (project.use_mixins.toBoolean()) {
        implementation "zone.rong:mixinbooter:${project.mixinbooster_version}"
        annotationProcessor group: 'org.spongepowered', name: 'mixin', version: project.mixin_version, classifier: 'processor'
        testAnnotationProcessor group: 'org.spongepowered', name: 'mixin', version: project.mixin_version, classifier: 'processor'
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        codeChickenLib
    }
}

processJarTask(jar)

// Create deobf dev jars
if (isCI || project.build_deobfJar.toBoolean()) {
    tasks.register('deobfJar', Jar) {
        archiveClassifier.set 'deobf'
        from sourceSets.main.output
    }
    processJarTask(deobfJar)
}
// Create source jar
if (isCI || project.build_sourceJar.toBoolean()) {
    tasks.register('sourcesJar', Jar) {
        archiveClassifier.set 'sources'
        from sourceSets.main.allJava
    }
}

sourceSets {
    main {
        // :troll: we are not using mixins, but a mod requires it
        // if (project.use_mixins.toBoolean()) {
        //     ext.refMap = "mixins.${project.name}.refmap.json"
        // }

        java {
            srcDirs = ['src/main/java', 'src/api/java']
        }

        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
    main.output.setResourcesDir(main.java.classesDirectory)
}

// It is important to NOT re-obfuscate jars for the deobfuscated environment.
// Therefore, we do not finalize the 'jar' task with the 'reobfJar' task.
// The Forge FG5 example buildscript states otherwise, however it creates broken builds in deobfuscated environments.
processResources {
    // required to allow file expansion later
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft_version
    
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft_version
    }
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// test {
//     testLogging {
//         events TestLogEvent.STARTED, TestLogEvent.PASSED, TestLogEvent.FAILED
//         exceptionFormat TestExceptionFormat.FULL
//         showExceptions true
//         showStackTraces true
//         showCauses true
//         showStandardStreams true
//     }

//     useJUnitPlatform()
// }

/**
 * Applies required processing to jar tasks
 * @param task the task to process
 */
private void processJarTask(task) {
    task.configure {
        manifest {
            def attribute_map = [
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                'Implementation-Commit': 'git rev-parse HEAD'.execute().text.trim(),
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ]
            if (project.use_coremod.toBoolean()) {
                attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
                if (project.include_mod.toBoolean()) {
                    attribute_map['FMLCorePluginContainsFMLMod'] = true
                    attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == 'build'
                }
            }
            if (project.use_mixins.toBoolean()) {
                attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
            }
            if (project.use_access_transformer.toBoolean()) {
                attribute_map['FMLAT'] = project.name + '_at.cfg'
            }
            attributes(attribute_map)
        }
        // exclude all files in src/api from being shipped in the jar
        // this prevents crashes in obfuscated environments
        file('src/api/').eachDirRecurse { dir ->
            exclude dir.name
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
